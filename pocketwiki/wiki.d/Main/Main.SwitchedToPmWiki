version=pmwiki-2.2.18 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b8pre) Gecko/20101028 Firefox/4.0b8pre Firefox/4.0b8pre
author=admin
charset=UTF-8
csum=
ctime=1287840535
host=81.217.70.206
name=Main.SwitchedToPmWiki
rev=23
targets=
text=(:title From MediaWiki to PmWiki:)%0a=Why I switched to PmWiki=%0a%0a(:include Template/Formatting#cbox#endcbox id="facts" width=400 class="cboxright tborder lightback" hidetext="PmWiki facts" showtext="PmWiki facts" init="show":)%0a* flat file data storage. No database required%0a* Lightweight and fast, yet feature rich%0a* very powerful markup features%0a* built-in inclusion and transclusion features, dynamic page lists and more%0a* extensible by cookbook recipes%0a* low requirements, should run on most webhosts, regardless of server software and PHP version (although, PHP 4 is required).%0a(:div1end:)%0a(:divend:)%0a%0aSwitching to another software for the exactly same purpose is not something you normally do just for fun, because it means work, sometimes a lot of. Converting a blog, forum or any other site from software package A to package B is rarely a smooth and quick experience. Switching from one Wiki software to another one can be a pain, because there really is no such thing as a "Wiki standard" :) Every system follows its own philosophy and, while partially more or less standardized, the markup features vary greatly among different platforms.\\\%0aIt might be easy for normal pages that are just using standard markup, but as soon as you add complexity (like inclusions, templates, groups/namespaces/categories, the transition won't be smooth.%0a%0aSaid all that, it should be clear that the decision to change the publishing platform is not an easy one and should be well considered.%0a%0a==So why switching then?==%0a%0a->'''The main reason is simple: Performance.'''%0a%0a(:div class="twocols":)%0aEven though I'm running this on a pretty fast server (a dual Xeon @3GHz, everything native, no virtual machines, highly optimized with nginx, FastCGI via domain sockets, eAccelerator PHPCache and optimized MySQL with query caching active), performance with MediaWiki was mediocre at best. It wasn't the web server, it wasn't the database, it simply was the script execution time.\\\%0a%0aNow, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonymous (= not logged in) users. And it does it well, but all the overhead needed for efficient caching, a database design that scales well for millions of pages makes the code more complex, thus more time consuming for small sites. My site won't ever have more than maybe a few hundred pages, so I do not need a solution that was designed to handle millions.\\\%0a%0aAlso, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software. Also, some extensions, no matter how simple they are, seem to degrade performance even more and the same applies to custom skins.\\\%0a%0aPmWiki's implementation approach is totally different. It is designed to be simple and easy to maintain, yet it does not lack the important features:%0a(:divend:)%0a(:div style="margin:10px 30px 5px 20px;":)%0a=== Some highlights ===%0a* extensible Wiki markup - all standard features are there and additional markup features can be added easily.%0a* Dynamic page lists - some kind of primitive script language to generate list of pages. One usage scenario: create a blog-like index of pages with teasers and a "read more" link.%0a* user authorization and -permissions for reading and editing pages. Also, user groups are possible. If this is too complex, there is a simpler password-based page protection scheme.%0a* Powerful method to include pages or part of pages - it is also possible to pass variables to included text segments. This allows to mimic the template system known from MediaWiki.%0a* Simple HTML cache - stores the HTML "compiled" version of the markup for faster page retrieval. Works for both anonymous and authenticated users. For high-traffic sites, additional cache methods are available as custom recipes (=addons/plugins/extensions whatever you may name it).%0a* Simultaneous editing. Don't overwrite changes done by someone else while you were editing a page.%0a* Wiki groups, categories (not the same as categories in MediaWiki though, PmWiki categories work more like a tagging system), group header, -footer and -home pages.%0a* Group customization - for example, a Wiki group can have its own skin/template.%0a* Wiki trails for easier navigation in a group of related pages.%0a* File attachments, organized per page or per group.%0a* Many, many, many custom recipes for adding additional functionality. Most of them are very easy and straightforward to install. From a blog up to a simple CMS, there is something for almost every purpose.%0a(:divend:)%0a(:div class="twocols":)%0adadfas%0a(:divend:)
time=1288348856
title=From MediaWiki to PmWiki
author:1288348856=admin
diff:1288348856:1288344310:=1d0%0a%3c (:title From MediaWiki to PmWiki:)%0a
host:1288348856=81.217.70.206
author:1288344310=admin
diff:1288344310:1288239506:=13,15c13,14%0a%3c Switching to another software for the exactly same purpose is not something you normally do just for fun, because it means work, sometimes a lot of. Converting a blog, forum or any other site from software package A to package B is rarely a smooth and quick experience. Switching from one Wiki software to another one can be a pain, because there really is no such thing as a "Wiki standard" :) Every system follows its own philosophy and, while partially more or less standardized, the markup features vary greatly among different platforms.\\\%0a%3c It might be easy for normal pages that are just using standard markup, but as soon as you add complexity (like inclusions, templates, groups/namespaces/categories, the transition won't be smooth.%0a%3c %0a---%0a> Switching to another software for the exactly same purpose is not something you normally do just for fun, because it means work, sometimes a lot of. Converting a blog, forum or any other site from software package A to package B is rarely a smooth and quick experience. Switching from one Wiki software to another one can be a pain, because there really is no such thing as a "Wiki standard" :) Every system follows its own philosophy and, while partially more or less standardized, the markup features vary greatly among different platforms. It might be easy for normal pages that are just using standard markup, but as soon as you add complexity (like inclusions, templates, groups/namespaces/categories, the transition won't be smooth.%0a> %0a27,29c26,28%0a%3c Also, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software. Also, some extensions, no matter how simple they are, seem to degrade performance even more and the same applies to custom skins.\\\%0a%3c %0a%3c PmWiki's implementation approach is totally different. It is designed to be simple and easy to maintain, yet it does not lack the important features:%0a---%0a> Also, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software. Also, some extensions, no matter how simple they are, seem to degrade performance even more and the same applies to custom skins.%0a> %0a> PmWiki's implementation approach is totally different. It is designed to be simple and easy to maintain, yet it does not lack the important features%0a31,47c30%0a%3c (:div style="margin:10px 30px 5px 20px;":)%0a%3c === Some highlights ===%0a%3c * extensible Wiki markup - all standard features are there and additional markup features can be added easily.%0a%3c * Dynamic page lists - some kind of primitive script language to generate list of pages. One usage scenario: create a blog-like index of pages with teasers and a "read more" link.%0a%3c * user authorization and -permissions for reading and editing pages. Also, user groups are possible. If this is too complex, there is a simpler password-based page protection scheme.%0a%3c * Powerful method to include pages or part of pages - it is also possible to pass variables to included text segments. This allows to mimic the template system known from MediaWiki.%0a%3c * Simple HTML cache - stores the HTML "compiled" version of the markup for faster page retrieval. Works for both anonymous and authenticated users. For high-traffic sites, additional cache methods are available as custom recipes (=addons/plugins/extensions whatever you may name it).%0a%3c * Simultaneous editing. Don't overwrite changes done by someone else while you were editing a page.%0a%3c * Wiki groups, categories (not the same as categories in MediaWiki though, PmWiki categories work more like a tagging system), group header, -footer and -home pages.%0a%3c * Group customization - for example, a Wiki group can have its own skin/template.%0a%3c * Wiki trails for easier navigation in a group of related pages.%0a%3c * File attachments, organized per page or per group.%0a%3c * Many, many, many custom recipes for adding additional functionality. Most of them are very easy and straightforward to install. From a blog up to a simple CMS, there is something for almost every purpose.%0a%3c (:divend:)%0a%3c (:div class="twocols":)%0a%3c dadfas%0a%3c (:divend:)%0a\ No newline at end of file%0a---%0a> %0a
host:1288344310=81.217.70.206
author:1288239506=admin
diff:1288239506:1288033907:=
host:1288239506=81.217.70.206
author:1288033907=admin
diff:1288033907:1287918812:=3c3%0a%3c (:include Template/Formatting#cbox#endcbox id="facts" width=400 class="cboxright tborder lightback" hidetext="PmWiki facts" showtext="PmWiki facts" init="show":)%0a---%0a> (:include Template/Formatting#cbox#endcbox id="facts" width=300 class="cboxright tborder lightback" hidetext="PmWiki facts (hide this)" showtext="PmWiki facts (show)" init="hide":)%0a13,14c13,14%0a%3c Switching to another software for the exactly same purpose is not something you normally do just for fun, because it means work, sometimes a lot of. Converting a blog, forum or any other site from software package A to package B is rarely a smooth and quick experience. Switching from one Wiki software to another one can be a pain, because there really is no such thing as a "Wiki standard" :) Every system follows its own philosophy and, while partially more or less standardized, the markup features vary greatly among different platforms. It might be easy for normal pages that are just using standard markup, but as soon as you add complexity (like inclusions, templates, groups/namespaces/categories, the transition won't be smooth.%0a%3c %0a---%0a> Switching to another software for the exactly same purpose is not something you normally do just for fun, because it means work, sometimes a lot of. Converting a blog, forum or any other site from software package A to package B is rarely a smooth and quick experience. Switching from one Wiki software to another one can be a pain, because Wiki isn't the same as Wiki :) Every system follows its own philosophy and, while partially more or less standardized, the markup features vary greatly among different platforms. It might be easy for normal pages that are just using standard markup, but as soon as you add complexity (like inclusions, templates, groups/namespaces/categories, the transition won't be smooth.%0a> %0a22,28c22,26%0a%3c Even though I'm running this on a pretty fast server (a dual Xeon @3GHz, everything native, no virtual machines, highly optimized with nginx, FastCGI via domain sockets, eAccelerator PHPCache and optimized MySQL with query caching active), performance with MediaWiki was mediocre at best. It wasn't the web server, it wasn't the database, it simply was the script execution time.\\\%0a%3c %0a%3c Now, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonymous (= not logged in) users. And it does it well, but all the overhead needed for efficient caching, a database design that scales well for millions of pages makes the code more complex, thus more time consuming for small sites. My site won't ever have more than maybe a few hundred pages, so I do not need a solution that was designed to handle millions.\\\%0a%3c %0a%3c Also, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software. Also, some extensions, no matter how simple they are, seem to degrade performance even more and the same applies to custom skins.%0a%3c %0a%3c PmWiki's implementation approach is totally different. It is designed to be simple and easy to maintain, yet it does not lack the important features%0a---%0a> Even though I'm running this on a pretty fast server (a dual Xeon @3GHz, everything native, no virtual machines, highly optimized with nginx, FastCGI via domain sockets, eAccelerator PHPCache and optimized MySQL with query caching active), performance was mediocre at best. It wasn't the web server, it wasn't the database, it simply was the script execution time.\\\%0a> %0a> Now, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonymous (= not logged in) users. And it does it well, but all the overhead needed for efficient caching, a database design that scales well for millions of entries makes the code more complex, thus more time consuming for small sites. My site won't ever have more than maybe a few hundred pages, so I do not need a solution that was designed to handle millions.\\\%0a> %0a> Also, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software.%0a
host:1288033907=81.217.70.206
author:1287918812=admin
diff:1287918812:1287917975:=
host:1287918812=81.217.70.206
author:1287917975=admin
diff:1287917975:1287916815:=28a29,59%0a> (:code lang=c++ linenum tabwidth=4 wrap=200:) [@%0a> struct ProxyAuthList : OBJLIST%3cProxyAuth>%0a> {%0a>         ProxyAuthList() :  OBJLIST%3cProxyAuth>(2, ProxyAuth::Compare) {}%0a> %0a>         void add(const char *szServer, const char *szMethod)%0a>         {%0a>                 if (szServer == NULL) return;%0a>                 int i = getIndex((ProxyAuth*)&szServer);%0a>                 if (i >= 0)%0a>                 { %0a>                         ProxyAuth &rec = (*this)[i];%0a>                         if (szMethod == NULL)%0a>                                 remove(i);%0a>                         else if (_stricmp(rec.szMethod, szMethod))%0a>                         {%0a>                                 mir_free(rec.szMethod); %0a>                                 rec.szMethod = mir_strdup(szMethod);%0a>                         }%0a>                 }%0a>                 else%0a>                         insert(new ProxyAuth(szServer, szMethod));%0a>         }%0a> %0a>         const char* find(const char *szServer)%0a>         {%0a>                 ProxyAuth * rec = szServer ? OBJLIST%3cProxyAuth>::find((ProxyAuth*)&szServer) : NULL ? rec == 0 ? rec->foo : rec->bar;%0a>                 return rec ? rec->szMethod : NULL;%0a>         }%0a> };%0a> @]%0a\ No newline at end of file%0a
host:1287917975=81.217.70.206
author:1287916815=admin
diff:1287916815:1287913045:=28,59d27%0a%3c %0a%3c (:code lang=c++ linenum tabwidth=4 wrap=200:) [@%0a%3c struct ProxyAuthList : OBJLIST%3cProxyAuth>%0a%3c {%0a%3c         ProxyAuthList() :  OBJLIST%3cProxyAuth>(2, ProxyAuth::Compare) {}%0a%3c %0a%3c         void add(const char *szServer, const char *szMethod)%0a%3c         {%0a%3c                 if (szServer == NULL) return;%0a%3c                 int i = getIndex((ProxyAuth*)&szServer);%0a%3c                 if (i >= 0)%0a%3c                 { %0a%3c                         ProxyAuth &rec = (*this)[i];%0a%3c                         if (szMethod == NULL)%0a%3c                                 remove(i);%0a%3c                         else if (_stricmp(rec.szMethod, szMethod))%0a%3c                         {%0a%3c                                 mir_free(rec.szMethod); %0a%3c                                 rec.szMethod = mir_strdup(szMethod);%0a%3c                         }%0a%3c                 }%0a%3c                 else%0a%3c                         insert(new ProxyAuth(szServer, szMethod));%0a%3c         }%0a%3c %0a%3c         const char* find(const char *szServer)%0a%3c         {%0a%3c                 ProxyAuth * rec = szServer ? OBJLIST%3cProxyAuth>::find((ProxyAuth*)&szServer) : NULL ? rec == 0 ? rec->foo : rec->bar;%0a%3c                 return rec ? rec->szMethod : NULL;%0a%3c         }%0a%3c };%0a%3c @] %0a\ No newline at end of file%0a
host:1287916815=81.217.70.206
author:1287913045=admin
diff:1287913045:1287899159:=14,15d13%0a%3c %0a%3c Said all that, it should be clear that the decision to change the publishing platform is not an easy one and should be well considered.%0a
host:1287913045=81.217.70.206
author:1287899159=admin
diff:1287899159:1287899071:=
host:1287899159=81.217.70.206
author:1287899071=admin
diff:1287899071:1287898735:=
host:1287899071=81.217.70.206
author:1287898735=admin
diff:1287898735:1287897448:=
host:1287898735=81.217.70.206
author:1287897448=admin
diff:1287897448:1287897428:=
host:1287897448=81.217.70.206
author:1287897428=admin
diff:1287897428:1287897034:=
host:1287897428=81.217.70.206
author:1287897034=admin
diff:1287897034:1287897019:=
host:1287897034=81.217.70.206
author:1287897019=admin
diff:1287897019:1287896946:=
host:1287897019=81.217.70.206
author:1287896946=admin
diff:1287896946:1287896522:=3c3%0a%3c (:include Template/Formatting#cbox#endcbox id="facts" width=300 class="cboxright tborder lightback" hidetext="PmWiki facts (hide this)" showtext="PmWiki facts (show)" init="hide":)%0a---%0a> (:include Template/Formatting#cbox#endcbox id="facts" width=300 class="cboxright tborder lightback" hidetext="PmWiki facts (hide this)" showtext="PmWiki facts (show)" init="show":)%0a
host:1287896946=81.217.70.206
author:1287896522=admin
diff:1287896522:1287896296:=
host:1287896522=81.217.70.206
author:1287896296=admin
diff:1287896296:1287883229:=2,11d1%0a%3c %0a%3c (:include Template/Formatting#cbox#endcbox id="facts" width=300 class="cboxright tborder lightback" hidetext="PmWiki facts (hide this)" showtext="PmWiki facts (show)" init="show":)%0a%3c * flat file data storage. No database required%0a%3c * Lightweight and fast, yet feature rich%0a%3c * very powerful markup features%0a%3c * built-in inclusion and transclusion features, dynamic page lists and more%0a%3c * extensible by cookbook recipes%0a%3c * low requirements, should run on most webhosts, regardless of server software and PHP version (although, PHP 4 is required).%0a%3c (:div1end:)%0a%3c (:divend:)%0a
host:1287896296=81.217.70.206
author:1287883229=admin
diff:1287883229:1287857275:=9,15c9,13%0a%3c (:div class="twocols":)%0a%3c Even though I'm running this on a pretty fast server (a dual Xeon @3GHz, everything native, no virtual machines, highly optimized with nginx, FastCGI via domain sockets, eAccelerator PHPCache and optimized MySQL with query caching active), performance was mediocre at best. It wasn't the web server, it wasn't the database, it simply was the script execution time.\\\%0a%3c %0a%3c Now, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonymous (= not logged in) users. And it does it well, but all the overhead needed for efficient caching, a database design that scales well for millions of entries makes the code more complex, thus more time consuming for small sites. My site won't ever have more than maybe a few hundred pages, so I do not need a solution that was designed to handle millions.\\\%0a%3c %0a%3c Also, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software.%0a%3c (:divend:)%0a---%0a> Even though I'm running this on a pretty fast server (a dual Xeon @3GHz, everything native, no virtual machines, highly optimized with nginx, FastCGI via domain sockets, eAccelerator PHPCache and optimized MySQL with query caching active), performance was mediocre at best. It wasn't the web server, it wasn't the database, it simply was the script execution time%0a> %0a> Now, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonymous (= not logged in) users. And it does it well, but all the overhead needed for efficient caching, a database design that scales well for millions of entries makes the code more complex, thus more time consuming for small sites. My site won't ever have more than maybe a few hundred pages, so I do not need a solution that was designed to handle millions.%0a> %0a> Also, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software.%0a\ No newline at end of file%0a
host:1287883229=81.217.70.206
author:1287857275=admin
diff:1287857275:1287854953:=2,7d1%0a%3c %0a%3c Switching to another software for the exactly same purpose is not something you normally do just for fun, because it means work, sometimes a lot of. Converting a blog, forum or any other site from software package A to package B is rarely a smooth and quick experience. Switching from one Wiki software to another one can be a pain, because Wiki isn't the same as Wiki :) Every system follows its own philosophy and, while partially more or less standardized, the markup features vary greatly among different platforms. It might be easy for normal pages that are just using standard markup, but as soon as you add complexity (like inclusions, templates, groups/namespaces/categories, the transition won't be smooth.%0a%3c %0a%3c ==So why switching then?==%0a%3c %0a%3c ->'''The main reason is simple: Performance.'''%0a
host:1287857275=81.217.70.206
author:1287854953=admin
diff:1287854953:1287840928:=5,7c5%0a%3c Now, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonymous (= not logged in) users. And it does it well, but all the overhead needed for efficient caching, a database design that scales well for millions of entries makes the code more complex, thus more time consuming for small sites. My site won't ever have more than maybe a few hundred pages, so I do not need a solution that was designed to handle millions.%0a%3c %0a%3c Also, I found MediaWiki hard to maintain and upgrade. While the main software didn't cause any issues for more than 2 years, some extensions did cause more than a small headache. Not the fault of MediaWiki either as unmaintained extensions or plugins are always a pain but I didn't want to invest the time to deal with some extensions after every update of the main software.%0a\ No newline at end of file%0a---%0a> Now, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonym (= not logged in) users.%0a\ No newline at end of file%0a
host:1287854953=81.217.70.206
author:1287840928=admin
diff:1287840928:1287840928:=1,5d0%0a%3c =Why I switched to PmWiki=%0a%3c %0a%3c Even though I'm running this on a pretty fast server (a dual Xeon @3GHz, everything native, no virtual machines, highly optimized with nginx, FastCGI via domain sockets, eAccelerator PHPCache and optimized MySQL with query caching active), performance was mediocre at best. It wasn't the web server, it wasn't the database, it simply was the script execution time%0a%3c %0a%3c Now, I know that MediaWiki isn't exactly slow. In fact, it might very well be the most scalable Wiki software you can get, but this comes with a price. MediaWiki is designed to run Wikipedia, it is optimized to serve many, many, many requests to a high number of anonym (= not logged in) users. %0a\ No newline at end of file%0a
host:1287840928=81.217.70.206
author:1287840535=admin
diff:1287840535:1287840535:=1d0%0a%3c =Why I switched to PmWiki=%0a
host:1287840535=81.217.70.206
